name: Security Vulnerability Analysis

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore CodeOptimization/CodeOptimization.csproj

    - name: Build
      run: dotnet build CodeOptimization/CodeOptimization.csproj --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore CodeOptimization/CodeOptimization.csproj

    - name: Run dotnet list package vulnerabilities
      run: |
        echo "Checking for vulnerable packages..."
        dotnet list CodeOptimization/CodeOptimization.csproj package --vulnerable --include-transitive
        if [ $? -ne 0 ]; then
          echo "Vulnerable packages found!"
          exit 1
        fi

    - name: Generate dependency report
      run: |
        echo "Generating dependency report..."
        dotnet list CodeOptimization/CodeOptimization.csproj package --include-transitive > dependency-report.txt
        echo "Dependency report generated:"
        cat dependency-report.txt

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore CodeOptimization/CodeOptimization.csproj

    - name: Run security audit with dotnet list
      run: |
        echo "Running security audit..."
        echo "## Security Audit Report" > security-audit-report.md
        echo "Generated: $(date)" >> security-audit-report.md
        echo "" >> security-audit-report.md
        
        echo "### Vulnerable Packages Check" >> security-audit-report.md
        if dotnet list CodeOptimization/CodeOptimization.csproj package --vulnerable --include-transitive 2>&1 | tee vulnerable-packages.txt; then
          echo "✅ No vulnerable packages found" >> security-audit-report.md
        else
          echo "⚠️ Vulnerable packages detected:" >> security-audit-report.md
          cat vulnerable-packages.txt >> security-audit-report.md
        fi
        
        echo "" >> security-audit-report.md
        echo "### Outdated Packages Check" >> security-audit-report.md
        dotnet list CodeOptimization/CodeOptimization.csproj package --outdated --include-transitive >> security-audit-report.md
        
        echo "" >> security-audit-report.md
        echo "### All Dependencies" >> security-audit-report.md
        dotnet list CodeOptimization/CodeOptimization.csproj package --include-transitive >> security-audit-report.md

    - name: Custom Code Security Analysis
      run: |
        echo "" >> security-audit-report.md
        echo "### Custom Code Security Analysis" >> security-audit-report.md
        echo "" >> security-audit-report.md
        
        # Check for weak random number generation
        echo "#### 🔴 Critical: Weak Random Number Generation" >> security-audit-report.md
        if grep -r "new Random()" CodeOptimization/*.cs; then
          echo "**ISSUE FOUND:** Weak random number generation detected" >> security-audit-report.md
          echo "**Location:** \`new Random()\` usage in password generation" >> security-audit-report.md
          echo "**Risk:** CRITICAL - Predictable random numbers" >> security-audit-report.md
          echo "**Fix:** Replace with \`RandomNumberGenerator.GetInt32()\`" >> security-audit-report.md
          echo "" >> security-audit-report.md
        else
          echo "✅ No weak random number generation found" >> security-audit-report.md
          echo "" >> security-audit-report.md
        fi
        
        # Check for hardcoded secrets
        echo "#### 🟡 Medium: Hardcoded Values" >> security-audit-report.md
        if grep -rE "(password|secret|key|token)\s*=\s*[\"'][^\"']+[\"']" CodeOptimization/*.cs; then
          echo "**ISSUE FOUND:** Potential hardcoded secrets detected" >> security-audit-report.md
          echo "**Risk:** MEDIUM - Hardcoded sensitive values" >> security-audit-report.md
          echo "**Fix:** Move to configuration files or environment variables" >> security-audit-report.md
          echo "" >> security-audit-report.md
        else
          echo "✅ No hardcoded secrets found" >> security-audit-report.md
          echo "" >> security-audit-report.md
        fi
        
        # Check for missing input validation
        echo "#### 🟡 Medium: Missing Input Validation" >> security-audit-report.md
        if grep -rE "public.*\(.*string\s+\w+.*\)" CodeOptimization/*.cs | grep -v "null" | grep -v "string\.IsNullOrEmpty"; then
          echo "**ISSUE FOUND:** Missing input validation in public methods" >> security-audit-report.md
          echo "**Risk:** MEDIUM - Potential null reference exceptions" >> security-audit-report.md
          echo "**Fix:** Add null checks and input validation" >> security-audit-report.md
          echo "" >> security-audit-report.md
        else
          echo "✅ Input validation appears adequate" >> security-audit-report.md
          echo "" >> security-audit-report.md
        fi
        
        # Check for SQL injection risks
        echo "#### 🔴 High: SQL Injection Risks" >> security-audit-report.md
        if grep -rE "string\.Format.*SELECT|string\.Concat.*SELECT" CodeOptimization/*.cs; then
          echo "**ISSUE FOUND:** Potential SQL injection risk detected" >> security-audit-report.md
          echo "**Risk:** HIGH - SQL injection vulnerability" >> security-audit-report.md
          echo "**Fix:** Use parameterized queries" >> security-audit-report.md
          echo "" >> security-audit-report.md
        else
          echo "✅ No SQL injection risks found" >> security-audit-report.md
          echo "" >> security-audit-report.md
        fi

    - name: Manual Dependency Analysis
      run: |
        echo "" >> security-audit-report.md
        echo "### Manual Dependency Analysis" >> security-audit-report.md
        echo "" >> security-audit-report.md
        
        echo "#### Known Outdated Dependencies" >> security-audit-report.md
        echo "" >> security-audit-report.md
        
        # Check log4net version
        if grep -q "log4net.*2\.0\.8" CodeOptimization/CodeOptimization.csproj; then
          echo "🔴 **log4net 2.0.8** - OUTDATED" >> security-audit-report.md
          echo "   - Current: 2.0.8" >> security-audit-report.md
          echo "   - Latest: 2.0.15+" >> security-audit-report.md
          echo "   - Risk: MEDIUM - May contain security vulnerabilities" >> security-audit-report.md
          echo "   - Fix: Update to latest version" >> security-audit-report.md
          echo "" >> security-audit-report.md
        fi
        
        # Check Newtonsoft.Json version
        if grep -q "Newtonsoft\.Json.*10\.0\.1" CodeOptimization/CodeOptimization.csproj; then
          echo "🔴 **Newtonsoft.Json 10.0.1** - OUTDATED" >> security-audit-report.md
          echo "   - Current: 10.0.1" >> security-audit-report.md
          echo "   - Latest: 13.0.3+" >> security-audit-report.md
          echo "   - Risk: HIGH - Known security vulnerabilities" >> security-audit-report.md
          echo "   - Fix: Update to latest version" >> security-audit-report.md
          echo "" >> security-audit-report.md
        fi
        
        echo "#### Recommended Actions" >> security-audit-report.md
        echo "" >> security-audit-report.md
        echo "1. **Fix Critical Issue:** Replace \`new Random()\` with \`RandomNumberGenerator\`" >> security-audit-report.md
        echo "2. **Update Dependencies:**" >> security-audit-report.md
        echo "   - log4net: 2.0.8 → 2.0.15+" >> security-audit-report.md
        echo "   - Newtonsoft.Json: 10.0.1 → 13.0.3+" >> security-audit-report.md
        echo "3. **Add Input Validation:** Add null checks to functions like \`IsPalindrome()\`, \`ReverseString()\`" >> security-audit-report.md
        echo "4. **Implement Error Handling:** Add try-catch blocks for exception handling" >> security-audit-report.md
        echo "5. **Security Logging:** Add security event logging" >> security-audit-report.md

    - name: Upload security audit report
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report
        path: |
          security-audit-report.md
          vulnerable-packages.txt

  snyk-security:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore CodeOptimization/CodeOptimization.csproj

    - name: Check for Snyk token
      id: check-snyk-token
      run: |
        if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
          echo "snyk-token-exists=true" >> $GITHUB_OUTPUT
        else
          echo "snyk-token-exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Run Snyk to check for vulnerabilities
      if: steps.check-snyk-token.outputs.snyk-token-exists == 'true'
      uses: snyk/actions/dotnet@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=CodeOptimization/CodeOptimization.csproj

    - name: Skip Snyk (no token)
      if: steps.check-snyk-token.outputs.snyk-token-exists == 'false'
      run: echo "Skipping Snyk scan - no SNYK_TOKEN configured"

  generate-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-check, security-audit, snyk-security]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate comprehensive security report
      run: |
        echo "# Security Scan Report - $(date)" > security-scan-report.md
        echo "" >> security-scan-report.md
        echo "## Scan Results Summary" >> security-scan-report.md
        echo "" >> security-scan-report.md
        echo "| Tool | Status |" >> security-scan-report.md
        echo "|------|--------|" >> security-scan-report.md
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> security-scan-report.md
        echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> security-scan-report.md
        echo "| Security Audit | ${{ needs.security-audit.result }} |" >> security-scan-report.md
        echo "| Snyk Security | ${{ needs.snyk-security.result || 'Skipped' }} |" >> security-scan-report.md
        echo "" >> security-scan-report.md
        echo "## Detailed Results" >> security-scan-report.md
        echo "" >> security-scan-report.md
        
        if [ -f "security-audit-report/security-audit-report.md" ]; then
          echo "### Security Audit Results" >> security-scan-report.md
          echo '```markdown' >> security-scan-report.md
          cat security-audit-report/security-audit-report.md >> security-scan-report.md
          echo '```' >> security-scan-report.md
        fi

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-report
        path: security-scan-report.md

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-scan-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

    - name: Send Email Notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "🔒 Security Vulnerability Alert - ${{ github.repository }}"
        to: ${{ secrets.CODE_OWNER_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        body: |
          <html>
          <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 800px; margin: 0 auto; padding: 20px;">
              <h2 style="color: #d73a49; border-bottom: 2px solid #d73a49; padding-bottom: 10px;">
                🔒 Security Vulnerability Alert
              </h2>
              
              <p><strong>Repository:</strong> ${{ github.repository }}</p>
              <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
              <p><strong>Commit:</strong> ${{ github.sha }}</p>
              <p><strong>Triggered by:</strong> ${{ github.actor }}</p>
              <p><strong>Scan Date:</strong> $(date)</p>
              
              <h3 style="color: #d73a49; margin-top: 30px;">🚨 Critical Security Issues Found</h3>
              
              <div style="background-color: #fff5f5; border-left: 4px solid #d73a49; padding: 15px; margin: 15px 0;">
                <h4 style="color: #d73a49; margin-top: 0;">🔴 Critical: Weak Random Number Generation</h4>
                <p><strong>Issue:</strong> Weak random number generation detected</p>
                <p><strong>Location:</strong> <code>new Random()</code> usage in password generation</p>
                <p><strong>Risk:</strong> CRITICAL - Predictable random numbers</p>
                <p><strong>Fix:</strong> Replace with <code>RandomNumberGenerator.GetInt32()</code></p>
              </div>
              
              <h3 style="color: #d73a49; margin-top: 30px;">📦 Outdated Dependencies</h3>
              
              <div style="background-color: #fff5f5; border-left: 4px solid #d73a49; padding: 15px; margin: 15px 0;">
                <h4 style="color: #d73a49; margin-top: 0;">🔴 log4net 2.0.8 - OUTDATED</h4>
                <ul>
                  <li><strong>Current:</strong> 2.0.8</li>
                  <li><strong>Latest:</strong> 2.0.15+</li>
                  <li><strong>Risk:</strong> MEDIUM - May contain security vulnerabilities</li>
                  <li><strong>Fix:</strong> Update to latest version</li>
                </ul>
              </div>
              
              <div style="background-color: #fff5f5; border-left: 4px solid #d73a49; padding: 15px; margin: 15px 0;">
                <h4 style="color: #d73a49; margin-top: 0;">🔴 Newtonsoft.Json 10.0.1 - OUTDATED</h4>
                <ul>
                  <li><strong>Current:</strong> 10.0.1</li>
                  <li><strong>Latest:</strong> 13.0.3+</li>
                  <li><strong>Risk:</strong> HIGH - Known security vulnerabilities</li>
                  <li><strong>Fix:</strong> Update to latest version</li>
                </ul>
              </div>
              
              <h3 style="color: #0366d6; margin-top: 30px;">✅ Recommended Actions</h3>
              
              <div style="background-color: #f6f8fa; border: 1px solid #d1d5da; border-radius: 6px; padding: 15px; margin: 15px 0;">
                <ol style="margin: 0; padding-left: 20px;">
                  <li><strong>Fix Critical Issue:</strong> Replace <code>new Random()</code> with <code>RandomNumberGenerator</code></li>
                  <li><strong>Update Dependencies:</strong>
                    <ul>
                      <li>log4net: 2.0.8 → 2.0.15+</li>
                      <li>Newtonsoft.Json: 10.0.1 → 13.0.3+</li>
                    </ul>
                  </li>
                  <li><strong>Add Input Validation:</strong> Add null checks to functions like <code>IsPalindrome()</code>, <code>ReverseString()</code></li>
                  <li><strong>Implement Error Handling:</strong> Add try-catch blocks for exception handling</li>
                  <li><strong>Security Logging:</strong> Add security event logging</li>
                </ol>
              </div>
              
              <h3 style="color: #0366d6; margin-top: 30px;">📊 Scan Results Summary</h3>
              
              <table style="width: 100%; border-collapse: collapse; margin: 15px 0;">
                <thead>
                  <tr style="background-color: #f6f8fa;">
                    <th style="border: 1px solid #d1d5da; padding: 8px; text-align: left;">Tool</th>
                    <th style="border: 1px solid #d1d5da; padding: 8px; text-align: left;">Status</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td style="border: 1px solid #d1d5da; padding: 8px;">CodeQL Analysis</td>
                    <td style="border: 1px solid #d1d5da; padding: 8px;">${{ needs.codeql-analysis.result }}</td>
                  </tr>
                  <tr>
                    <td style="border: 1px solid #d1d5da; padding: 8px;">Dependency Check</td>
                    <td style="border: 1px solid #d1d5da; padding: 8px;">${{ needs.dependency-check.result }}</td>
                  </tr>
                  <tr>
                    <td style="border: 1px solid #d1d5da; padding: 8px;">Security Audit</td>
                    <td style="border: 1px solid #d1d5da; padding: 8px;">${{ needs.security-audit.result }}</td>
                  </tr>
                  <tr>
                    <td style="border: 1px solid #d1d5da; padding: 8px;">Snyk Security</td>
                    <td style="border: 1px solid #d1d5da; padding: 8px;">${{ needs.snyk-security.result || 'Skipped' }}</td>
                  </tr>
                </tbody>
              </table>
              
              <div style="background-color: #f6f8fa; border: 1px solid #d1d5da; border-radius: 6px; padding: 15px; margin: 20px 0;">
                <p style="margin: 0;"><strong>📋 Next Steps:</strong></p>
                <ul style="margin: 10px 0 0 0; padding-left: 20px;">
                  <li>Review the detailed security report in GitHub Actions</li>
                  <li>Address critical and high-priority issues immediately</li>
                  <li>Update dependencies to latest secure versions</li>
                  <li>Implement recommended security improvements</li>
                  <li>Re-run security scans after fixes</li>
                </ul>
              </div>
              
              <p style="color: #586069; font-size: 14px; margin-top: 30px; border-top: 1px solid #e1e4e8; padding-top: 15px;">
                This email was automatically generated by the Security Vulnerability Analysis workflow.<br>
                Repository: <a href="https://github.com/${{ github.repository }}">${{ github.repository }}</a><br>
                Workflow: <a href="https://github.com/${{ github.repository }}/actions">View in GitHub Actions</a>
              </p>
            </div>
          </body>
          </html>
        content_type: text/html
